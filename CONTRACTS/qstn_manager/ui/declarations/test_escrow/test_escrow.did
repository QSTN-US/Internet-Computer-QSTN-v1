type Time = int;
type SubaccountBlob = blob;
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: AccountIdText;
 };
type SurveyState = 
 variant {
   closed;
   live;
   nosurvey;
   whitelist: vec principal;
 };
type SurveyId = nat;
type EscrowStats = 
 record {
   endTime: Time;
   nftNumber: nat;
   nftPriceE8S: nat;
   nftsSold: nat;
   openSubaccounts: nat;
 };
type EscrowCanister = 
 service {
   addConfirmedAccountsToConfirmedAccountsArray: () -> ();
   cancelTransfer: (AccountIdText) -> ();
   confirmTransfer: (AccountIdText) -> (Result_1);
   getAccountsInfo: () -> (text) query;
   getConfirmedAccountsArray: () -> (vec AccountIdAndTime) query;
   getDisbursements: () -> (text) query;
   getLogs: () -> (text) query;
   getMetadata: () ->
    (record {
       endTime: Time;
       nftNumber: nat;
       nftPriceE8S: nat;
       surveyId: SurveyId;
       recipient: principal;
     }) query;
   getNewAccountId: (principal) -> (Result);
   getSurveyState: () -> (SurveyState) query;
   getStats: () -> (EscrowStats) query;
   getSubaccountsInfo: () ->
    (record {
       toDrain: record {
                  arr: vec APS;
                  count: nat;
                  index: nat;
                };
       toRefund: record {
                   arr: vec APS;
                   count: nat;
                   index: nat;
                 };
     }) query;
   releaseFunds: () -> ();
   returnFunds: () -> ();
   testHasCNFT: (principal) -> (bool);
   updateSurveyState: () -> (SurveyState);
 };
type AccountIdText = text;
type AccountIdAndTime = 
 record {
   accountId: AccountIdText;
   time: Time;
 };
type APS = 
 record {
   AccountIdText;
   principal;
   SubaccountBlob;
 };
service : (SurveyId, principal, nat, nat, Time, bool) -> EscrowCanister
